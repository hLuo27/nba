setwd(nba)
setwd('nba')
dat <- read.csv('nba2017-players.csv', stringsAsFactors = FALSE)
dat_points <- dat$points
range(5)
range(1,5)
range(1,5,1)
x = 5
1:x
dat_points <- na.omit(dat$points)
n = 100 #Sample size
numSamples = 1000 #Number of samples
for (i in 1:numSamples) {
oneSample = sample(dat_points,n)
}
allSamples = numeric()
allSamples = numeric()
for (i in 1:numSamples) {
allSamples = c(allSamples, sample(dat_points,n))
}
allSamples = numeric()
for (i in 1:numSamples) {
allSamples = c(allSamples, mean(sample(dat_points,n)))
}
for (oneSample in allSamples){
jackknifeSamples = c(jackknifeSamples, mean(jackknifeSamples[-oneSample]))
}
jackknifeSamples = numeric()
allSamples[-1]
for (oneSample in allSamples){
jackknifeSamples = c(jackknifeSamples, mean(jackknifeSamples[-oneSample]))
}
jackknifeSamples = numeric()
for (oneSample in allSamples){
jackknifeSamples = c(jackknifeSamples, mean(allSamples[-oneSample]))
}
mean(allSamples)
mean(jackknifeSamples)
mean(dat_points) #Population
mean(allSamples) #Simple Random Sample
mean(jackknifeSamples) #Jackknife Resampling
jackknifeSamples = numeric()
for (j in 1:numSamples){
jackknifeSamples = c(jackknifeSamples, mean(allSamples[-j]))
}
mean(jackknifeSamples)
sd(allSamples)
sd(dat_points)
sd(jackknifeSamples)
nrow(allSamples[-1])
length(allSamples[-1])
allSamples[-1]==allSamples
allSamples[-1]==allSamples[-2]
x <- c(1,2,3,4,5)
x-[2]
x[-2]
typeof(x)
typeof(allSamples)
x[-1]==x[-2]
allSamples[-1]==allSamples[-2]
jackknifeSamples
srsSamples = numeric()
jackknifeSamples = numeric()
for (i in 1:numSamples) {
oneSample = sample(dat_points,n)
allSamples = c(allSamples, mean(oneSample))
without_one_observation = numeric()
for (j in 1:n){
without_one_observation = c(without_one_observation, mean(oneSample[-j]))
}
jackknifeSamples = c(jackknifeSamples, mean(without_one_observation))
}
srsSamples = numeric()
for (i in 1:numSamples) {
oneSample = sample(dat_points,n)
srsSamples = c(srsSamples, mean(oneSample))
without_one_observation = numeric()
for (j in 1:n){
without_one_observation = c(without_one_observation, mean(oneSample[-j]))
}
jackknifeSamples = c(jackknifeSamples, mean(without_one_observation))
}
jackknifeSamples = numeric()
srsSamples = numeric()
for (i in 1:numSamples) {
oneSample = sample(dat_points,n)
srsSamples = c(srsSamples, mean(oneSample))
without_one_observation = numeric()
for (j in 1:n){
without_one_observation = c(without_one_observation, mean(oneSample[-j]))
}
jackknifeSamples = c(jackknifeSamples, mean(without_one_observation))
}
jackknifeSamples == srsSamples
mean(dat_points) #Population
mean(srsSamples) #Simple Random Sample
mean(jackknifeSamples) #Jackknife Resampling
n = 10 #Sample size
numSamples = 1000 #Number of samples
srsSamples = numeric()
jackknifeSamples = numeric()
for (i in 1:numSamples) {
oneSample = sample(dat_points,n)
srsSamples = c(srsSamples, mean(oneSample))
without_one_observation = numeric()
for (j in 1:n){
without_one_observation = c(without_one_observation, mean(oneSample[-j]))
}
jackknifeSamples = c(jackknifeSamples, mean(without_one_observation))
}
mean(dat_points) #Population
mean(jackknifeSamples) #Jackknife Resampling
mean(srsSamples) #Simple Random Sample
jackknife(dat_points,mean)
srsSamples = sample(dat_points,numSamples)
n = 100 #Sample size
numSamples = 1000 #Number of samples
srsSamples = sample(dat_points,ns)
srsSamples = sample(dat_points,n)
jackknifeSamples = numeric()
for (i in 1:numSamples) {
oneSample = sample(dat_points,n)
without_one_observation = numeric()
for (j in 1:n){
without_one_observation = c(without_one_observation, mean(oneSample[-j]))
}
jackknifeSamples = c(jackknifeSamples, mean(without_one_observation))
}
mean(dat_points) #Population
mean(srsSamples) #Simple Random Sample
mean(jackknifeSamples) #Jackknife Resampling
for (i in 1:numSamples) {
jackknifeSamples = c(jackknifeSamples, mean(srsSample[-i]))
}
srsSample = sample(dat_points,n)
for (i in 1:numSamples) {
jackknifeSamples = c(jackknifeSamples, mean(srsSample[-i]))
}
mean(dat_points) #Population
mean(srsSamples) #Simple Random Sample
mean(srsSample) #Simple Random Sample
mean(jackknifeSamples) #Jackknife Resampling
dat <- read.csv('nba2017-players.csv', stringsAsFactors = FALSE)
dat_points <- na.omit(dat$points)
n = 100 #Sample size
srsSample = sample(dat_points,n)
jackknifeSamples = numeric()
for (i in 1:numSamples) {
jackknifeSamples = c(jackknifeSamples, mean(srsSample[-i]))
}
numSamples = 1000 #Number of samples
for (i in 1:numSamples) {
jackknifeSamples = c(jackknifeSamples, mean(srsSample[-i]))
}
sd(dat_points)
sd(jackknifeSamples)
srs = sample(dat_points,n)
jackknifeSamples = numeric()
for (i in 1:numSamples) {
jackknifeSamples = c(jackknifeSamples, mean(srs[-i]))
}
mean(dat_points) #Population
mean(srs) #Simple Random Sample
mean(jackknifeSamples) #Jackknife Resampling
n = 100 #Sample size
numSamples = 1000 #Number of samples
srs = sample(dat_points,n)
jackknifeSamples = numeric()
for (i in 1:numSamples) {
jackknifeSamples = c(jackknifeSamples, mean(srs[-i]))
}
for (j in 1:numSamples) {
}
mean(dat_points) #Population
mean(srs) #Simple Random Sample
mean(jackknifeSamples) #Jackknife Resampling
srs = sample(dat_points,n)
jackknifeSamples = numeric()
for (i in 1:numSamples) {
jackknifeSamples = c(jackknifeSamples, mean(srs[-i]))
}
mean(srs) #Simple Random Sample
mean(jackknifeSamples) #Jackknife Resampling
srs == jackknifeSamples
srs = sample(dat_points,n)
jackknifeSamples = numeric()
for (i in 1:n) {
jackknifeSamples = c(jackknifeSamples, mean(srs[-i]))
}
mean(srs) #Simple Random Sample
mean(jackknifeSamples) #Jackknife Resampling
mean(jackknifeSamples) == mean(srs)
sd(srs)
sd(jackknifeSamples)
sd(srs)
mean(dat_points) #Population
library(bootstrap)
install.packages("bootstrap")
library(bootstrap)
jackknife(srs,mean)
for (i in 1:n) {
for (j in (i+1):n) {
jackknifeSamples = c(jackknifeSamples, mean(srs[-c(i,j)]))
}
}
jackknifeSamples = numeric()
for (i in 1:n) {
for (j in (i+1):n) {
jackknifeSamples = c(jackknifeSamples, mean(srs[-c(i,j)]))
}
}
mean(srs) #Simple Random Sample
mean(jackknifeSamples) #Jackknife Resampling
dat_points <- na.omit(dat$points)
n = 100 #Sample size
numRepeats = round(length(dat_points)/n)
for (i in n){
bootstrapSamples = c(bootstrapSamples, rep(srs[i],numRepeats))
}
bootstrapSamples = numeric()
for (i in n){
bootstrapSamples = c(bootstrapSamples, rep(srs[i],numRepeats))
}
for (i in 1:n){
bootstrapSamples = c(bootstrapSamples, rep(srs[i],numRepeats))
}
mean(bootstrapSamples) #Bootstrap Resampling
mean(srs) #Simple Random Sample
mean(dat_points) #Population
sd(dat_points)
sd(srs)
sd(bootstrapSamples)
#Remove 1 observation with jackknife
jackknifeSamples = numeric()
for (i in 1:n) {
jackknifeSamples = c(jackknifeSamples, mean(srs[-i]))
}
#Remove 2 observations with jackknife
jackknifeSamples2 = numeric()
for (i in 1:n) {
for (j in (i+1):n) {
jackknifeSamples2 = c(jackknifeSamples2, mean(srs[-c(i,j)]))
}
}
mean(jackknifeSamples) #Jackknife Resampling with 1 removal
mean(jackknifeSamples2) #Jackknife Resampling with 2 removals
jackknife(x = srs, theta = mean)
#Alternatively, we can use the jackknife function in the bootstrap package
library(bootstrap)
jackknife(srs, theta = mean)
typeof(jackknife(srs, theta = mean))
jackknife(srs, theta = mean)[3]
jackknife(srs, theta = mean)["values"]
jackknife(srs, theta = mean)["jack.values"]
jackknife(srs, theta = mean)["jack.values"] == jackknifeSamples
jackknife(srs, theta = mean)["jack.values"]
jackknife(srs, theta = mean) #Returns a list consisting of resampling standard error, bias, and values
sd(jackknifeSamples)
hist(jackknifeSamples)
hist(jackknifeSamples)
hist(srs)
hist(srs)
hist(dat_points)
hist(jackknifeSamples)
library("corrplot")
dat <- read.csv('nba2017-players.csv', stringsAsFactors = FALSE)
View(dat)
quant_dat <- dat[,-c(1:3,8)]
View(quant_dat)
M <- cor(quant_dat) #Correlation matrix
M
corplot(M, "circles")
corrplot(M, "circles")
corrplot(M, "circle")
corrplot(M, "circle")
corrplot(M, "square")
corrplot(M, "ellipse")
corrplot(M, "number")
corrplot(M, "shade")
corrplot(M, "color")
corrplot(M, "pie")
corrplot.mixed(M, lower="number",upper="pie")
corrplot.mixed(M, lower="number",upper="pie")
corrplot.mixed(M, lower="number",upper="pie",lower.col = "black")
corrplot.mixed(M, lower="number",upper="pie",lower.col = "black")
corrplot.mixed(M, lower="number",upper="pie",lower.col = "black",number.cex = 5)
corrplot.mixed(M, lower="number",upper="pie",lower.col = "black",number.cex = 7)
corrplot.mixed(M, lower="number",upper="pie",lower.col = "black",number.cex = 10)
corrplot.mixed(M, lower="number",upper="pie",lower.col = "black",number.cex = 1)
corrplot.mixed(M, lower="number",upper="pie",lower.col = "black",number.cex = 0.1)
corrplot.mixed(M, lower="number",upper="pie",lower.col = "black",number.cex = 0.5)
corrplot.mixed(M, lower="number",upper="pie",lower.col = "black",number.cex = 0.7)
corrplot.mixed(M, lower="number",upper="pie",lower.col = "black",number.cex = 0.7, tl.cex = 0.5)
corrplot.mixed(M, lower="number",upper="pie",lower.col = "black",number.cex = 0.7, tl.cex = 0.6)
corrplot.mixed(M, lower="number",upper="pie",lower.col = "black",number.cex = 0.7, tl.cex = 0.5)
corrplot.mixed(M, lower="number",upper="pie",lower.col = "black",number.cex = 0.7, tl.cex = 0.5)
#corrplot(M, "shade")
#corrplot(M, "pie")
library(corrplot)
library(corrplot)
library("corrplot")
corrplot(M, "circle")
corrplot(M, "circle")
corrplot.mixed(M, lower="number",upper="pie",lower.col = "black",number.cex = 0.7, tl.cex = 0.5)
corrplot.mixed(M, lower="number",upper="pie",lower.col = "black",number.cex = 0.7, tl.cex = 0.5)
corrplot(M, "shade")
corrplot(M, "shade")
corrplot(M, method = "shade", order = "hclust")
corrplot(M, method = "shade", order = "hclust")
corrplot(M, method = "shade", order = "AOE")
corrplot(M, method = "shade", order = "FPC")
corrplot(M, method = "shade", order = "alphabet")
corrplot(M, method = "shade", order = "AOE")
